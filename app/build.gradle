plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'androidx.navigation.safeargs.kotlin'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk versions.compileSdkVersion

    defaultConfig {
        applicationId "ca.bc.gov.myhealth"
        minSdk versions.minSdkVersion
        targetSdk versions.targetSdkVersion
        versionCode versions.versionCode
        versionName versions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "version"
    productFlavors {

        mock {
            dimension "version"
            applicationIdSuffix ".mock"
            manifestPlaceholders = [app_label: "@string/app_name_mock"]
            versionNameSuffix "-${versions.versionCode}-mock"
        }

        dev {
            dimension "version"
            applicationIdSuffix ".dev"
            manifestPlaceholders = [app_label: "@string/app_name_development"]
            versionNameSuffix "-${versions.versionCode}-dev"
        }

        stage {
            dimension "version"
            applicationIdSuffix ".stage"
            manifestPlaceholders = [app_label: "@string/app_name_stage"]
            versionNameSuffix "-${versions.versionCode}-stage"
        }

        prod {
            dimension "version"
            manifestPlaceholders = [app_label: "@string/app_name"]
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = versions.compose_compiler
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    hilt {
        enableAggregatingTask = true
    }

    task getApkVersion {
        println defaultConfig.versionName + "-" + defaultConfig.versionCode
    }
    namespace 'ca.bc.gov.bchealth'
}

dependencies {
    implementation "androidx.core:core-ktx:$versions.core_ktx"

    implementation "androidx.appcompat:appcompat:$versions.appcompat"
    implementation "com.google.android.material:material:$versions.material"
    implementation "androidx.recyclerview:recyclerview:$versions.recycler"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraint_layout"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$versions.swipe_refresh_layout"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$versions.coordinator"

    implementation libs.bundles.androidx

    //Compose
    def composeBom = platform(libs.compose.bom)
    implementation composeBom
    implementation libs.compose.activity
    implementation libs.compose.constraint.layout
    debugImplementation libs.compose.ui.tooling
    implementation libs.compose.navigation
    implementation libs.bundles.compose

    //Navigation
    implementation libs.bundles.navigation

    //JetPack LiveData ViewModel
    implementation libs.bundles.androidx.lifecycle
    implementation libs.bundles.androidx.lifecycle.compose


    //Dagger Hilt
    implementation "com.google.dagger:hilt-android:$versions.hilt"
    implementation("androidx.hilt:hilt-navigation-compose:1.0.0")
    implementation project(path: ':repository')
    implementation project(path: ':appauth')
    implementation project(path: ':common')
    kapt "com.google.dagger:hilt-compiler:$versions.hilt"

    //Biometric
    implementation "androidx.biometric:biometric-ktx:$versions.biometric"

    //Google BarcodeScanner
    implementation "com.google.mlkit:barcode-scanning:$versions.barcode_scanning"

    //Camerax
    implementation "androidx.camera:camera-camera2:$versions.camerax"
    implementation "androidx.camera:camera-lifecycle:$versions.camerax"
    implementation "androidx.camera:camera-view:$versions.camerax"
    implementation "androidx.camera:camera-extensions:$versions.camerax"

    //Custom chrome tab
    implementation "androidx.browser:browser:$versions.browser"

    //In-app updates
    implementation "com.google.android.play:app-update:$versions.app_update"
    implementation "com.google.android.play:app-update-ktx:$versions.app_update"

    //work manager
    api "androidx.work:work-runtime-ktx:$versions.work"
    api "androidx.hilt:hilt-work:$versions.hilt_work"
    kapt "androidx.hilt:hilt-compiler:$versions.hilt_work"

    // https://stackoverflow.com/questions/29402155/android-unit-test-not-mocked
    testImplementation 'org.json:json:20210307'

    testImplementation "junit:junit:$versions.junit"

    androidTestImplementation composeBom
    androidTestImplementation "androidx.test.ext:junit:$versions.ext_junit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espresso"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$versions.hilt"

    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$versions.hilt"
}